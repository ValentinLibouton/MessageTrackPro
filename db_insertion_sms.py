import sqlite3
import os
from dotenv import load_dotenv
# Load environnement variables from .env
dotenv_path = "variables.env"
load_dotenv(dotenv_path)

# Get environnement variables
DB_NAME = os.getenv("DB_NAME")
def create_primary_key(sms):
    """
    Create a primary key for an SMS message based on its date, time, and date sent.

    Args:
        sms (SMS): An SMS message object with date, time, and date_sent attributes.

    Returns:
        str: A unique primary key generated by concatenating the date without dashes,
        the time without colons, and the date_sent attribute of the SMS message.
    """
    primary_key = f"{sms.strdate}{sms.strtime}{sms.date_sent}"
    return primary_key


def check_value_existence(table_name, column_name, value):
    """
    Check if a specified value exists in a given table and column of an SQLite database.

    Args:
        table_name (str): The name of the table to search in.
        column_name (str): The name of the column to search in.
        value: The value to check for existence in the specified column.

    Returns:
        bool: True if the value exists in the specified column, False otherwise.
    """
    connection = sqlite3.connect(DB_NAME)
    cursor = connection.cursor()
    query = f"SELECT * FROM {table_name} WHERE {column_name} = ?"
    cursor.execute(query, (value,))
    row = cursor.fetchone()
    connection.close()
    if row is None:
        return False
    else:
        return row[0]


def add_address(str_address):
    """
     Add a phone number to the 'ContactPhoneNumbers' table in the SQLite database, or retrieve its existing ID if it already exists.

     Args:
         str_address (str): The phone number to add or check for existence.

     Returns:
         int: The ID of the phone number in the 'ContactPhoneNumbers' table. If the phone number already exists, its existing ID is returned.
              If the phone number is newly inserted, the ID generated for the new row is returned.
     """
    phone_id = None
    phone_id = check_value_existence(table_name="ContactPhoneNumbers", column_name="phone", value=str_address)
    if not phone_id:
        connection = sqlite3.connect(DB_NAME)
        cursor = connection.cursor()

        cursor.execute("INSERT INTO ContactPhoneNumbers (phone) VALUES (?)", (str_address,))

        # Récupérer l'ID généré automatiquement
        new_row_id = cursor.lastrowid

        # Récupérer les données insérées
        cursor.execute("SELECT * FROM ContactPhoneNumbers WHERE phone_id = ?", (new_row_id,))
        new_row = cursor.fetchone()

        connection.commit()
        connection.close()
        email_id = new_row[0]
        #print(f"Inserted in ContactPhoneNumbers: phone_id={new_row[0]}, contact_id={new_row[1]}, phone={new_row[2]}")
    else:
        #print(f"{str_address} already exist in table ContactPhoneNumbers with PK:{phone_id}.")
        pass
    return phone_id


def mtm_sms_id_phone_id(sms_id, phone_ids):
    """
    Create many-to-many relationships between an SMS and one or more phone numbers in the 'Sms_ContactPhoneNumber' table.

    Args:
        sms_id (str): The ID of the SMS to associate with the phone numbers.
        phone_ids (list of int): A list of phone number IDs to associate with the SMS.

    Returns:
        None
    """
    connection = sqlite3.connect(DB_NAME)
    cursor = connection.cursor()
    for phone_id in phone_ids:
        cursor.execute("SELECT COUNT (*) FROM Sms_ContactPhoneNumber WHERE sms_id = ? AND phone_id = ?", (sms_id, phone_id))
        occurence = cursor.fetchone()[0]
        if occurence == 0:
            query = f"INSERT INTO Sms_ContactPhoneNumber (sms_id, phone_id) VALUES (?, ?)"
            cursor.execute(query, (sms_id, phone_id))
            connection.commit()
    connection.close()


def add_sms(primary_key, phone_ids, sms):
    """
    Add an SMS and its associated data to the 'Sms' table in the database.

    Args:
        primary_key (str): The primary key for the SMS.
        phone_ids (list of int): A list of phone number IDs associated with the SMS.
        sms (SMS): An SMS object containing SMS data to be added to the database.

    Returns:
        None
    """
    mtm_sms_id_phone_id(sms_id=primary_key, phone_ids=phone_ids)
    connection = sqlite3.connect(DB_NAME)
    cursor = connection.cursor()

    cursor.execute("SELECT COUNT (*) FROM Sms WHERE sms_id = ?", (primary_key,))
    occurence = cursor.fetchone()[0]
    if occurence == 0:
        query = f"INSERT INTO Sms (sms_id, type_str, date, time, contact_name, body, protocol, type, subject, toa," \
                f"sc_toa, service_center, read, status, locked, date_sent, sub_id, readable_date)" \
                f"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"

        cursor.execute(query, (primary_key, sms.type_str, str(sms.date), str(sms.time), sms.contact_name, sms.body, sms.protocol, sms.type, sms.subject, sms.toa,
                               sms.sc_toa, sms.service_center, sms.read, sms.status, sms.locked, sms.date_sent, sms.sub_id, sms.readable_date))
    connection.commit()
    connection.close()


def add_smses(sms_list):
    """
    Add a list of SMS messages and their associated data to the database.

    Args:
        sms_list (list of SMS): A list of SMS objects containing SMS data to be added to the database.

    Returns:
        None
    """
    for sms in sms_list:
        primary_key = create_primary_key(sms=sms)
        # Liste pour stocker les ID des numéros de téléphone liés à ce SMS
        phone_ids = []
        for address in sms.recipient_list:
            phone_id = add_address(str_address=address)
            phone_ids.append(phone_id)

        add_sms(primary_key=primary_key, phone_ids=phone_ids, sms=sms)

